################
# Copyright 2009 Google Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
#    
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
##
 
################
# Default property file for running JInjector.
# This file is supposed to be used both by JInjector and by an and script 
# invoking it.
#
# It is necessary to specify required libraries and the sequence of Loadables
# to apply. To include a third party custom loadable simply specify its full 
# name.
################
################

############
# JINJECTOR_DECORATORS specify which decorators needs to be included.
# JINJECTOR_DECORATORS_COVERAGE specifies decorators for coverage.
#
# This variable is only used by the and script which is compiling them 
# and adding them to the binary directory. If decorators are not re-compiled 
# every time, or compiled in other ways then this variables can be omitted.
########### 
JINJECTOR_DECORATORS=com/google/test/jinjector/*
JINJECTOR_DECORATORS_COVERAGE=com/google/test/jinjector/coverage/*

############
# JINJECTOR_REGRESSION specify which tests needs to be included.
#
# This variable is only used by the and script which is compiling them 
# and adding them to the binary directory. If test are not re-compiled 
# every time, or compiled in other ways then this variables can be omitted.
########### 
#JINJECTOR_REGRESSION=

###########
# CUSTOM_LOADERS_JARS specify jars containing additional loaders which will
# be used to instrument the bytecode.
#
# All the loaders which are not part of JInjector needs to be specified here.
###########
CUSTOM_LOADERS_JARS=

##############
# Specify an execution id for this instrumentation. This id will be used to 
# identify concurrent execution and it will be used to identify generated file 
# names for instance the coverage report.
#############
runId=.myId

############
# platform specifies the target platform. 
# J2SE for standard java
# J2ME for java 2 mobile edition, even if compiled for blackberry
# RIM for application based on RIM for blackberry (not MIDlets)
###########
platform=J2ME

###########
# jars specifies a ";" separated list containing all the jar which have to be
# used during the instrumentation.
#
# JInjector does not load the default classpath as it can be not valid for the
# target platform. This implies that also the jar containing the target 
# framework must be specified.
#
# For J2ME it is necessary to specify CLDC and MIDP used.
# For RIM it is necessary to specify the RIM library.
# For regression tests it is necessary to specify the location of J2MEUnit
###########
jars=lib/WTK/v2_5_2/lib/cldcapi10.jar;lib/WTK/v2_5_2/lib/j2me-ws.jar;lib/WTK/v2_5_2/lib/jsr082.jar;lib/WTK/v2_5_2/lib/jsr184.jar;lib/WTK/v2_5_2/lib/jsr75.jar;lib/WTK/v2_5_2/lib/midpapi20.jar;lib/WTK/v2_5_2/lib/mmapi.jar;lib/WTK/v2_5_2/lib/wma20.jar;lib/j2me/jsr179.jar;lib/j2me/jsr256.jar;lib/j2meunit/lib/j2meunit.jar;lib/rim/4.2.1.89/net_rim_api.jar

###############
# It is possible to specify an input jar file which JInjector may unzip in the
# binary folder. If no jar file is specified JInjector simply loads files from
# the binary folder.
###############
#inputJar=input.jar

##############
# binaryFolder is the folder containing all the .class files which JInjector 
# will instrument.
##############
binaryFolder=build/jinjector/bin

#############
# Name of the output jar file and of the output folder in which JInector will 
# store all the instrumented files. 
#############
outputJar=instrumented.jar
destinationFolder=build/jinjector/instrumented

###################LOADABLES#####################
#############
# The rest of this file contains an ordered list of Loadables and their related
# properties.
#
# Each Loadable is specified by a property called AdapterX where X must be a
# continuous number starting from 0. JInjector will load each Loadable
# sequentially as long as they are marked with sequential numbers. If one number
# is missing the following will not be loaded.
#
# JInjector will then instrument the code by applying all the Loadables in the 
# order they have specified. Some Loadables may need to respect a certain order.
#
# It is possible to use third-party Loadables simply by adding them to the list.
############

###########
# Code coverage.
#
# coverage can be DISABLED, LINE, SUMMARY
###########
Adapter0=com.google.devtools.build.wireless.testing.java.injector.coverage.CoverageLoadable
coverage=LINE
coverageInclusionList=+com/google/
lineCoverageOutputFilename=coverage.lcov

#####
# LCDUI instrumentation
# This is required for injected tests in J2ME applications
#####
#Adapter1=com.google.devtools.build.wireless.testing.java.injector.j2me.LcduiLoadable

#####
# Inject tests.
#
# regression specified the test suite to run.
#####
#Adapter2=com.google.devtools.build.wireless.testing.java.injector.ReplayLoadable
#regression=

#AdapterX=com.google.devtools.build.wireless.testing.java.injector.ExceptionExposerLoadable

#AdapterX=com.google.devtools.build.wireless.testing.java.injector.WhiteBoxLoadable
#whiteboxClassInclusion=
#whiteboxMethodInclusion=
#whiteboxFieldInclusion=
