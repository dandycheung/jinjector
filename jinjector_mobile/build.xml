<?xml version="1.0"?>
<project name="InstrumentedProjectName" default="run-WTK" basedir=".">

	<!-- ********************************************** -->
  <!-- ********* INSTRUMENTATION ARGUMENTS ********** -->
  <!-- ********************************************** -->
 
	<property file="jinjector.properties"/>
  <property 
    name="intrumentation.arguments" 
    value="${JINJECTOR_PLATFORM} ${JINJECTOR_COVERAGE} ${JINJECTOR_WHITEBOX} ${JINJECTOR_EWL} ${JINJECTOR_LCDUI} ${JINJECTOR_ALLTESTS}" />
    	
	<!-- ********************************************** -->
	<!-- ***************** TOOLS ********************** -->
	<!-- ********************************************** -->
	
	<!-- binary of JInjector used to instrument the class files -->
	<property name="jinjector" location="tools/jinjector.jar" />
	
	<!-- binary of JadGenerator used to update the jad -->
	<property name="JadGenerator" value="${basedir}/tools/jadgenerator_deploy.jar" />
	
	<!-- WTK location on local machine -->
	<property name="WTK" value ="/usr/share/jvm/WTK2.6" />
	
	<!-- used emulator device -->
	<property name="emulator.device" value="DefaultColorPhone" />
	
	<!-- J@MEUnit location -->
	<property name="j2meunit" value="lib/j2meunit.jar" />
  
	<!-- ********************************************** -->
	<!-- ************FILES AND FOLDERS***************** -->
	<!-- ********************************************** -->
	
	<!-- source folder of the project which needs to be instrumented -->
	<property name="src" location="${basedir}/src" /> 
	
  <!-- destination folder for compiled classes -->
  <property name="bin" location="${basedir}/bin" />  
	
	<!-- destination folder for instrumented classes -->
	<property name="instrumented" location="${basedir}/instrumented" />
	
	<!-- destination folder for preverified classes -->
	<property name="preverified" location="${basedir}/preverified" />

  <!-- base.decorators folder for the decorators -->
  <property name="decorators.src" location="${basedir}/decorators" />
	
  <!-- base.decorators folder for the regression files -->
  <property name="decorators.src" location="${basedir}/regression" />
  
  <!-- destination folder for jar and jad -->
  <property name="dist" value="dist" />  
	
	<!-- generated instrumented jar file --> 
  <property name="jarfile_instrumented" location="${dist}/${ant.project.name}.jar" />
	
	<!-- generated instrumented jad file --> 
  <property name="jadfile_instrumented" location="${dist}/${ant.project.name}.jad" />
	
	<!-- original jad file --> 
	<property name="jadfile_original" value = "${ant.project.name}.jad" />
	
	<!-- used manifest file -->
  <property name="manifest" value="MANIFEST.MF" />

  <!-- ********************************************** -->
  <!-- ****************** CLASSPATH ***************** -->
  <!-- ********************************************** -->

  <!-- WTK jars -->
  <path id="WTK.lib">
    <fileset dir="${WTK}/lib">
      <include name="**/cldcapi11.jar" />
      <include name="**/midpapi20.jar" />
      <include name="**/jsr082.jar" />
      <include name="**/jsr75.jar" />
      <include name="**/jsr184.jar" />
      <include name="**/j2me-ws.jar" />
      <include name="**/mmapi.jar" />
      <include name="**/wma20.jar" />
    </fileset>
  </path>

  <!-- classpath contains WTK and all the libraries specified in the property file -->
  <path id="class.path">
    <path refid="WTK.lib" />
    <!-- libraries -->
    <pathelement path="${LIBS}" />
  </path>
  <pathconvert pathsep=" " property="classpath_space" refid="class.path">
    <map from="${basedir}" to=""/>
  </pathconvert>
  <property name="classpath" refid="class.path" />
  
  <!-- ********************************************** -->
  <!-- ****************** TARGETS ******************* -->
  <!-- ********************************************** -->
	
  <!-- Extracts the original jar file in the bin directory -->
  <target name="extract" description="Extracts ${jarfile_original} in ${bin}">
    <mkdir dir="${bin}" />
  	<unzip src="${j2meunit}" dest="${bin}" />
  </target> 
 
	<!-- compile the source code of the original project
	     this target can be replaced with a custom build target or with a 
	     custom build script -->
  <target name="compile" depends="extract"  description="Compiles the source">
    <javac srcdir="${src}" 
      destdir="${bin}" 
      includeAntRuntime="no" 
      classpathref="class.path" 
      includes="**" 
      debug="true" 
      source="1.3" target="1.3" 
      deprecation="yes" 
      encoding="utf8">
    </javac>
  </target>

	<!-- compile the decorators and places them in the instrumented directory -->
  <target name="compile.decorators" depends="compile" description="Compiles the decorators">
    <javac srcdir="${decorators.src}" 
      destdir="${instrumented}" 
      includeAntRuntime="no" 
      classpathref="class.path" 
      classpath="${bin}" 
      includes="${JINJECTOR_DECORATORS}" 
      debug="true" 
      source="1.3" target="1.3" 
      deprecation="yes" 
      encoding="utf8">
    </javac>
  </target>
	
	<!-- compile the decorators and places them in the instrumented directory -->
	<target name="compile.regression" depends="compile,compile.decorators" 
	    description="Compiles the regression test">
	  <javac srcdir="${regression.src}" 
	      destdir="${bin}" 
	      includeAntRuntime="no" 
	      classpathref="class.path" 
	      classpath="${bin} ${instrumented}" 
	      includes="${JINJECTOR_REGRESSION}" 
	      debug="true" 
	      source="1.3" target="1.3" 
	      deprecation="yes" 
	      encoding="utf8">
	  </javac>
	</target>
 
  <target name="instrument" 
	    depends="compile,compile.decorators,compile.regression" 
	    description="Instrument the J2ME code">
    <mkdir dir="${instrumented}"/>
     <!--the original target "java" was creating problems with the double -jar 
    parameters. this is just a workaround to that problem. -->
    <exec executable="java">
      <arg line="-jar ${jinjector} -bin_folder=${bin} -dest_folder=${instrumented} -jars ${classpath_space} ${intrumentation.arguments}" />
    </exec>   
  </target>

  <!-- Preverify -->
  <target name="preverify" depends="instrument">
    <mkdir dir="${preverified}" />
    <exec executable="${WTK}/bin/preverify">
      <arg line="-classpath ${classpath}" />
      <arg line="-d ${preverified}" />
      <arg line="-target CLDC1.1" />
      <arg line="${instrumented}" />
    </exec>
  </target>

  <!-- Jar/Jad -->
  <target name="jar" depends="preverify" 
    description="Build the jar and regenerate the jad">
    <mkdir dir="${dist}" />
    <copy file="${manifest}" tofile="${dist}/${manifest}" />
    <copy file="deployed/${jadfile_original}" tofile="${jadfile_instrumented}" />
    <jar 
      jarfile="${jarfile_instrumented}" 
      basedir="${preverified}" 
      manifest="${manifest}" 
      duplicate="fail">
      <fileset dir="${instrumented}" excludes="**/*.class" />
      
    </jar>
    <!--the original target "java" was creating problems with the double -jar 
     parameters. this is just a workaround to that problem. -->
    <exec executable="java">
      <arg line="-jar ${JadGenerator} --jar=${jarfile_instrumented} --jad=${jadfile_instrumented}" />
    </exec>
  </target>

  <!-- Run using WTK -->
  <target name="run-WTK" depends="jar" 
    description="Run jad on Sun emulator">
    <exec executable="${WTK}/bin/emulator">
      <arg line="-Xdescriptor ${jadfile_instrumented}" />
      <arg line="-Xheapsize:16M" />
      <arg line="-Xdevice:${emulator.device}" />
      <arg line="-Xdomain:maximum" />
      <!--<arg line="${midlet.class}" />-->
    </exec>
  </target>

	<!-- Clean the project -->
  <target name="clean" description="Remove build andant.project.name dist directories">
    <delete dir="${bin}" />
    <delete dir="${instrumented}" />
    <delete dir="${preverified}" />
    <delete dir="${dist}" />
  </target>
  
</project>